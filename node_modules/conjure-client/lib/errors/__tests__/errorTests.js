"use strict";
/**
 * @license
 * Copyright 2018 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var error_1 = require("../error");
var body = {
    errorCode: "NOT_FOUND",
    message: "Refer to the server logs",
};
function removeSpaces(str) {
    return str.replace(/\s/g, "");
}
describe("ConjureError", function () {
    describe("toString", function () {
        it("stringifies the body, and includes the status and type", function () {
            var error = new error_1.ConjureError(error_1.ConjureErrorType.Status, undefined, 400, body);
            expect(removeSpaces(error.toString())).toEqual(removeSpaces("{\n                        \"body\": {\n                            \"errorCode\": \"NOT_FOUND\",\n                            \"message\": \"Refer to the server logs\"\n                        },\n                        \"status\": 400,\n                        \"type\": \"STATUS\"\n                    }"));
        });
        it("uses the default string conversion for the originalError, if an originalError is defined", function () {
            var originalError = {
                toString: function () { return "I'm an error"; },
            };
            var error = new error_1.ConjureError(error_1.ConjureErrorType.Status, originalError, 400, undefined);
            expect(removeSpaces(error.toString())).toEqual(removeSpaces("{\n                        \"originalError\": \"I'm an error\",\n                        \"status\": 400,\n                        \"type\": \"STATUS\"\n                    }"));
        });
        it("handles cases where the originalError, status and body are undefined", function () {
            var error = new error_1.ConjureError(error_1.ConjureErrorType.Status);
            expect(removeSpaces(error.toString())).toEqual(removeSpaces("{\n                        \"type\": \"STATUS\"\n                    }"));
        });
    });
});
//# sourceMappingURL=errorTests.js.map