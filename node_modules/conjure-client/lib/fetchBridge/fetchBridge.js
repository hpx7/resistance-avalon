"use strict";
/**
 * @license
 * Copyright 2018 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../errors");
var httpApiBridge_1 = require("../httpApiBridge");
function formatUserAgent(userAgent) {
    var productName = userAgent.productName, productVersion = userAgent.productVersion;
    return productName + "/" + productVersion;
}
var FetchBridge = /** @class */ (function () {
    function FetchBridge(params) {
        this.getBaseUrl = typeof params.baseUrl === "function" ? params.baseUrl : function () { return params.baseUrl; };
        this.getToken = typeof params.token === "function" ? params.token : function () { return params.token; };
        this.fetch = params.fetch;
        this.userAgent = params.userAgent;
    }
    FetchBridge.prototype.callEndpoint = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var url, data, _a, headers, method, requestMediaType, responseMediaType, stringifiedHeaders, fetchRequestInit, token, fetchFunction, response, contentType, bodyPromise, body, error_1, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = this.getBaseUrl() + "/" + this.buildPath(params) + this.buildQueryString(params);
                        data = params.data, _a = params.headers, headers = _a === void 0 ? {} : _a, method = params.method, requestMediaType = params.requestMediaType, responseMediaType = params.responseMediaType;
                        headers["Fetch-User-Agent"] = formatUserAgent(this.userAgent);
                        stringifiedHeaders = {};
                        // Only send present headers as strings
                        Object.keys(headers).forEach(function (key) {
                            var headerValue = headers[key];
                            if (headerValue != null) {
                                stringifiedHeaders[key] = headerValue.toString();
                            }
                        });
                        fetchRequestInit = {
                            credentials: "same-origin",
                            headers: stringifiedHeaders,
                            method: method,
                        };
                        token = this.getToken();
                        if (token !== undefined) {
                            fetchRequestInit.headers = __assign({}, fetchRequestInit.headers, { Authorization: "Bearer " + token });
                        }
                        if (requestMediaType != null && requestMediaType !== httpApiBridge_1.MediaType.MULTIPART_FORM_DATA) {
                            // don't include for form data because we need the browser to fill in the form boundary
                            fetchRequestInit.headers["Content-Type"] = requestMediaType;
                        }
                        if (responseMediaType != null) {
                            // If an endpoint can return multiple content types, make sure it returns the type that we're expecting
                            // instead of the default `*/*
                            fetchRequestInit.headers[FetchBridge.ACCEPT_HEADER] = responseMediaType;
                        }
                        if (data != null) {
                            fetchRequestInit.body = this.handleBody(params);
                        }
                        fetchFunction = this.fetch || fetch;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 7, , 8]);
                        return [4 /*yield*/, fetchFunction(url, fetchRequestInit)];
                    case 2:
                        response = _b.sent();
                        if (response.status === 204) {
                            // Users of this HTTP bridge are responsible for declaring whether their endpoint might return a 204
                            // by including `| undefined` in callEndpoint's generic type param. We choose this over declaring the
                            // return type of this method as `Promise<T | undefined` so that API calls which are guaranteed to
                            // resolve to a non-null value (when successful) don't have to deal with an unreachable code path.
                            return [2 /*return*/, undefined];
                        }
                        contentType = response.headers.get("Content-Type");
                        bodyPromise = void 0;
                        if (contentType != null) {
                            if (contentType.includes(httpApiBridge_1.MediaType.APPLICATION_JSON)) {
                                bodyPromise = response.json();
                            }
                            else if (contentType.includes(httpApiBridge_1.MediaType.APPLICATION_OCTET_STREAM)) {
                                bodyPromise = response.blob();
                            }
                            else {
                                bodyPromise = response.text();
                            }
                        }
                        else {
                            bodyPromise = response.text();
                        }
                        body = void 0;
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, bodyPromise];
                    case 4:
                        body = _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _b.sent();
                        throw new errors_1.ConjureError(errors_1.ConjureErrorType.Parse, error_1, response.status);
                    case 6:
                        if (!response.ok) {
                            throw new errors_1.ConjureError(errors_1.ConjureErrorType.Status, undefined, response.status, body);
                        }
                        return [2 /*return*/, body];
                    case 7:
                        error_2 = _b.sent();
                        if (error_2 instanceof errors_1.ConjureError) {
                            throw error_2;
                        }
                        else if (error_2 instanceof TypeError) {
                            throw new errors_1.ConjureError(errors_1.ConjureErrorType.Network, error_2);
                        }
                        else {
                            throw new errors_1.ConjureError(errors_1.ConjureErrorType.Other, error_2);
                        }
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    FetchBridge.prototype.appendQueryParameter = function (query, key, value) {
        query.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
    };
    FetchBridge.prototype.buildPath = function (parameters) {
        var urlParameterRegex = /\{[^\}]+\}/;
        var path = this.normalizeWithNoLeadingSlash(parameters.endpointPath);
        for (var _i = 0, _a = parameters.pathArguments; _i < _a.length; _i++) {
            var pathArgument = _a[_i];
            pathArgument = pathArgument == null ? "" : pathArgument;
            path = path.replace(urlParameterRegex, encodeURIComponent(pathArgument));
        }
        return path;
    };
    FetchBridge.prototype.buildQueryString = function (parameters) {
        var _this = this;
        var query = [];
        var _loop_1 = function (key) {
            var value = parameters.queryArguments[key];
            if (value == null) {
                return "continue";
            }
            if (value instanceof Array) {
                value.forEach(function (v) { return _this.appendQueryParameter(query, key, v); });
            }
            else {
                this_1.appendQueryParameter(query, key, value);
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = Object.keys(parameters.queryArguments); _i < _a.length; _i++) {
            var key = _a[_i];
            _loop_1(key);
        }
        return query.length > 0 ? "?" + query.join("&") : "";
    };
    FetchBridge.prototype.handleBody = function (parameters) {
        switch (parameters.requestMediaType) {
            case httpApiBridge_1.MediaType.APPLICATION_JSON:
                return JSON.stringify(parameters.data);
            case httpApiBridge_1.MediaType.APPLICATION_OCTET_STREAM:
            case httpApiBridge_1.MediaType.MULTIPART_FORM_DATA:
                return parameters.data;
            case httpApiBridge_1.MediaType.TEXT_PLAIN:
                if (typeof parameters.data === "object") {
                    throw new Error("Invalid data: cannot send object as request media type text/plain");
                }
                return parameters.data;
            default:
                throw new Error("Unrecognized request media type " + parameters.requestMediaType);
        }
    };
    FetchBridge.prototype.normalizeWithNoLeadingSlash = function (input) {
        if (input && input[0] === "/") {
            input = input.slice(1);
        }
        return input;
    };
    FetchBridge.ACCEPT_HEADER = "accept";
    return FetchBridge;
}());
exports.FetchBridge = FetchBridge;
//# sourceMappingURL=fetchBridge.js.map