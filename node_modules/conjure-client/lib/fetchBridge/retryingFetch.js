"use strict";
/**
 * @license
 * Copyright 2018 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The maximum value we accept in a Retry-After header.
 * If a server passes a value larger than this, we disregard
 * the Retry-After header.
 */
var MAX_RETRY_AFTER_MS = 60000;
var SERVICE_UNAVAILABLE = 503;
var TOO_MANY_REQUESTS = 429;
/**
 * Implements "exponential backoff with full jitter", suggesting a backoff duration chosen randomly from the interval
 * `[0, backoffSlotSize * 2^c)` for the c-th retry for a maximum of `maxNumRetries` retries.
 */
function exponentialBackoff(maxNumRetries, backoffSlotSizeMs) {
    return function (attempt) {
        if (attempt + 1 >= maxNumRetries) {
            return undefined;
        }
        var upperBound = Math.pow(2, attempt);
        return Math.floor(Math.random() * upperBound * backoffSlotSizeMs);
    };
}
exports.exponentialBackoff = exponentialBackoff;
var RetryingFetch = /** @class */ (function () {
    function RetryingFetch(delegate, backoffStrategy) {
        this.delegate = delegate;
        this.backoffStrategy = backoffStrategy;
    }
    Object.defineProperty(RetryingFetch.prototype, "fetch", {
        get: function () {
            return this.fetchInternal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    RetryingFetch.prototype.fetchInternal = function (url, init) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.doAttempt(url, init, 0, resolve, reject);
        });
    };
    RetryingFetch.prototype.getRetryAfterHeaderValue = function (response) {
        var retryAfterHeader = response.headers.get("Retry-After");
        if (retryAfterHeader == null) {
            return undefined;
        }
        var retryAfter = parseInt(retryAfterHeader, 10);
        if (isNaN(retryAfter)) {
            return undefined;
        }
        if (retryAfter < 0 || retryAfter > MAX_RETRY_AFTER_MS) {
            return undefined;
        }
        return retryAfter;
    };
    RetryingFetch.prototype.getRetryAfter = function (response, attempt) {
        if (response.status === TOO_MANY_REQUESTS || response.status === SERVICE_UNAVAILABLE) {
            var backoffStrategyBackoff = this.backoffStrategy(attempt);
            if (backoffStrategyBackoff === undefined) {
                return undefined;
            }
            var retryAfterFromHeader = this.getRetryAfterHeaderValue(response);
            if (retryAfterFromHeader !== undefined) {
                return retryAfterFromHeader;
            }
            else {
                return backoffStrategyBackoff;
            }
        }
        return undefined;
    };
    RetryingFetch.prototype.doAttempt = function (url, init, attempt, resolve, reject) {
        return __awaiter(this, void 0, void 0, function () {
            var fetchFunction, response, retryAfter, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fetchFunction = this.delegate;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fetchFunction(url, init)];
                    case 2:
                        response = _a.sent();
                        if (response.ok) {
                            resolve(response);
                            return [2 /*return*/];
                        }
                        retryAfter = this.getRetryAfter(response, attempt);
                        if (retryAfter !== undefined) {
                            // let's try again!
                            setTimeout(function () { return _this.doAttempt(url, init, attempt + 1, resolve, reject); }, retryAfter);
                        }
                        else {
                            // no more retries, return what we have
                            resolve(response);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        reject(e_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return RetryingFetch;
}());
exports.RetryingFetch = RetryingFetch;
//# sourceMappingURL=retryingFetch.js.map