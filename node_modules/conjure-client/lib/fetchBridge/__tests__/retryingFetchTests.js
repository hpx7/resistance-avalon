"use strict";
/**
 * @license
 * Copyright 2018 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var retryingFetch_1 = require("../retryingFetch");
var baseUrl = "https://host.domain/path";
var token = "TOKEN";
describe("RetryingFetch", function () {
    var maxAttempts = 3;
    var backoff = retryingFetch_1.exponentialBackoff(maxAttempts, 100);
    it("delegates to the passed delegate fetch", function () { return __awaiter(_this, void 0, void 0, function () {
        var expectedUrl, expectedFetchRequest, expectedFetchResponse, delegateFetch, retryingFetch, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest("POST");
                    expectedFetchResponse = createFetchResponse(undefined, 200);
                    delegateFetch = jest.fn(function (_, __) {
                        return Promise.resolve(expectedFetchResponse);
                    });
                    retryingFetch = new retryingFetch_1.RetryingFetch(delegateFetch, backoff);
                    response = retryingFetch.fetch(expectedUrl, expectedFetchRequest);
                    return [4 /*yield*/, expect(response).resolves.toBe(expectedFetchResponse)];
                case 1:
                    _a.sent();
                    expect(delegateFetch.mock.calls.length).toBe(1);
                    expect(delegateFetch.mock.calls[0]).toEqual([expectedUrl, expectedFetchRequest]);
                    return [2 /*return*/];
            }
        });
    }); });
    it("retries a limited number of times", function () { return __awaiter(_this, void 0, void 0, function () {
        var expectedUrl, expectedFetchRequest, expectedFetchResponse, delegateFetch, retryingFetch, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest("POST");
                    expectedFetchResponse = createFetchResponse(undefined, 429);
                    delegateFetch = jest.fn(function (_, __) {
                        return Promise.resolve(expectedFetchResponse);
                    });
                    retryingFetch = new retryingFetch_1.RetryingFetch(delegateFetch, backoff);
                    response = retryingFetch.fetch(expectedUrl, expectedFetchRequest);
                    return [4 /*yield*/, expect(response).resolves.toBe(expectedFetchResponse)];
                case 1:
                    _a.sent();
                    expect(delegateFetch.mock.calls.length).toBe(maxAttempts);
                    return [2 /*return*/];
            }
        });
    }); });
    it("retries on 503s", function () { return __awaiter(_this, void 0, void 0, function () {
        var expectedUrl, expectedFetchRequest, expectedFetchResponse, delegateFetch, retryingFetch, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest("POST");
                    expectedFetchResponse = createFetchResponse(undefined, 503);
                    delegateFetch = jest.fn(function (_, __) {
                        return Promise.resolve(expectedFetchResponse);
                    });
                    retryingFetch = new retryingFetch_1.RetryingFetch(delegateFetch, backoff);
                    response = retryingFetch.fetch(expectedUrl, expectedFetchRequest);
                    return [4 /*yield*/, expect(response).resolves.toBe(expectedFetchResponse)];
                case 1:
                    _a.sent();
                    expect(delegateFetch.mock.calls.length).toBe(maxAttempts);
                    return [2 /*return*/];
            }
        });
    }); });
    it("does not retry non-qos error response", function () { return __awaiter(_this, void 0, void 0, function () {
        var expectedUrl, expectedFetchRequest, expectedFetchResponse, delegateFetch, retryingFetch, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest("POST");
                    expectedFetchResponse = createFetchResponse(undefined, 400);
                    delegateFetch = jest.fn(function (_, __) {
                        return Promise.resolve(expectedFetchResponse);
                    });
                    retryingFetch = new retryingFetch_1.RetryingFetch(delegateFetch, backoff);
                    response = retryingFetch.fetch(expectedUrl, expectedFetchRequest);
                    return [4 /*yield*/, expect(response).resolves.toBe(expectedFetchResponse)];
                case 1:
                    _a.sent();
                    // check we did not retry
                    expect(delegateFetch.mock.calls.length).toBe(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it("honours Retry-After header", function () { return __awaiter(_this, void 0, void 0, function () {
        var expectedUrl, expectedFetchRequest, expectedFetchResponse, delegateFetch, retryingFetch, originalSetTimeout, mockedSetTimeout;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest("POST");
                    expectedFetchResponse = createFetchResponse(undefined, 429);
                    if (expectedFetchResponse.headers instanceof Headers) {
                        expectedFetchResponse.headers.append("Retry-After", "123");
                    }
                    delegateFetch = jest.fn(function (_, __) {
                        return Promise.resolve(expectedFetchResponse);
                    });
                    retryingFetch = new retryingFetch_1.RetryingFetch(delegateFetch, backoff);
                    originalSetTimeout = window.setTimeout;
                    mockedSetTimeout = jest.fn(function (callback, timeout) {
                        originalSetTimeout(callback, timeout);
                    });
                    window.setTimeout = mockedSetTimeout;
                    return [4 /*yield*/, retryingFetch.fetch(expectedUrl, expectedFetchRequest)];
                case 1:
                    _a.sent();
                    expect(mockedSetTimeout.mock.calls[0][1]).toEqual(123);
                    // restore
                    window.setTimeout = originalSetTimeout;
                    return [2 /*return*/];
            }
        });
    }); });
});
function createFetchRequest(method, data, contentType, headers) {
    if (contentType === void 0) { contentType = "application/json"; }
    if (headers === void 0) { headers = {}; }
    var request = {
        credentials: "same-origin",
        headers: __assign({}, headers, { Authorization: "Bearer " + token }),
        method: method,
    };
    if (data != null) {
        request.body = contentType === "application/json" ? JSON.stringify(data) : data;
        // when we do a fetch with form data, leave the Content-Type undefined so browser can set form boundary
        if (contentType !== "multipart/form-data") {
            request.headers["Content-Type"] = contentType;
        }
    }
    return request;
}
function createFetchResponse(data, status) {
    return {
        blob: function () { return Promise.resolve(new Blob([data])); },
        headers: new Headers(),
        json: function () { return Promise.resolve(JSON.parse(data)); },
        ok: 200 <= status && status < 300,
        status: status,
        text: function () { return Promise.resolve(data); },
    };
}
//# sourceMappingURL=retryingFetchTests.js.map