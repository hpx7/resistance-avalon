"use strict";
/**
 * @license
 * Copyright 2018 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var fetchMock = require("fetch-mock");
var errors_1 = require("../../errors");
var httpApiBridge_1 = require("../../httpApiBridge");
var fetchBridge_1 = require("../fetchBridge");
var baseUrl = "https://host.domain/path";
var token = "TOKEN";
var userAgent = { productName: "foo", productVersion: "1.2.3" };
var ACCEPT_HEADER = "accept";
describe("FetchBridgeImpl", function () {
    var mockedRequestData = {
        requestData: "REQUEST_DATA",
    };
    var mockedResponseData = {
        responseData: "RESPONSE_DATA",
    };
    var bridge;
    var fetchMockStub;
    function mockFetch(expectedUrl, expectedRequest, fetchResponse) {
        fetchMockStub = fetchMock.mock(function (actualUrl, actualRequest) {
            expect(actualUrl).toBe(expectedUrl);
            expect(actualRequest).toEqual(expectedRequest);
            return true;
        }, fetchResponse);
    }
    beforeEach(function () {
        bridge = new fetchBridge_1.FetchBridge({ baseUrl: baseUrl, token: token, fetch: undefined, userAgent: userAgent });
    });
    afterEach(function () {
        fetchMockStub.restore();
    });
    it("makes DELETE requests", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        endpointName: "a",
                        endpointPath: "a/{var}/b",
                        method: "DELETE",
                        pathArguments: ["val"],
                        queryArguments: {},
                    };
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest({
                        method: "DELETE",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(undefined, 204);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toBeUndefined()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("makes GET request", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        endpointName: "a",
                        endpointPath: "a/{var}/b",
                        method: "GET",
                        pathArguments: ["val"],
                        queryArguments: {},
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest({
                        method: "GET",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(mockedResponseData, 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toEqual(mockedResponseData)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("makes POST request with JSON data", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        data: mockedRequestData,
                        endpointName: "a",
                        endpointPath: "a/{var}/b",
                        method: "POST",
                        pathArguments: ["val"],
                        queryArguments: {},
                        requestMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest({
                        data: mockedRequestData,
                        method: "POST",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(mockedResponseData, 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toEqual(mockedResponseData)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("makes POST request with binary data", function () { return __awaiter(_this, void 0, void 0, function () {
        var fakeBinaryData, request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fakeBinaryData = "dGVzdA==";
                    request = {
                        data: fakeBinaryData,
                        endpointName: "a",
                        endpointPath: "a/{var}/b",
                        method: "POST",
                        pathArguments: ["val"],
                        queryArguments: {},
                        requestMediaType: httpApiBridge_1.MediaType.APPLICATION_OCTET_STREAM,
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest({
                        contentType: "application/octet-stream",
                        data: fakeBinaryData,
                        method: "POST",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(mockedResponseData, 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toEqual(mockedResponseData)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("makes POST request with plain text data", function () { return __awaiter(_this, void 0, void 0, function () {
        var fakeTextData, request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fakeTextData = "Hello World";
                    request = {
                        data: fakeTextData,
                        endpointName: "a",
                        endpointPath: "a/{var}/b",
                        method: "POST",
                        pathArguments: ["val"],
                        queryArguments: {},
                        requestMediaType: httpApiBridge_1.MediaType.TEXT_PLAIN,
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest({
                        contentType: httpApiBridge_1.MediaType.TEXT_PLAIN,
                        data: fakeTextData,
                        method: "POST",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(mockedResponseData, 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toEqual(mockedResponseData)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("makes POST request with boolean data", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        data: false,
                        endpointName: "a",
                        endpointPath: "a/{var}/b",
                        method: "POST",
                        pathArguments: ["val"],
                        queryArguments: {},
                        requestMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest({
                        data: false,
                        method: "POST",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse("false", 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toEqual(false)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("makes POST request with form data without setting 'Content-Type'", function () { return __awaiter(_this, void 0, void 0, function () {
        var fakeBinaryData, request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fakeBinaryData = "dGVzdA==";
                    request = {
                        data: fakeBinaryData,
                        endpointName: "a",
                        endpointPath: "a/{var}/b",
                        method: "POST",
                        pathArguments: ["val"],
                        queryArguments: {},
                        requestMediaType: httpApiBridge_1.MediaType.MULTIPART_FORM_DATA,
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest({
                        contentType: "multipart/form-data",
                        data: fakeBinaryData,
                        method: "POST",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(mockedResponseData, 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toEqual(mockedResponseData)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("makes PUT request", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        data: mockedRequestData,
                        endpointName: "a",
                        endpointPath: "a/{var}/b",
                        method: "PUT",
                        pathArguments: ["val"],
                        queryArguments: {},
                        requestMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a/val/b";
                    expectedFetchRequest = createFetchRequest({
                        data: mockedRequestData,
                        method: "PUT",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(mockedResponseData, 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toEqual(mockedResponseData)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("makes request with many parameters", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        endpointName: "a",
                        endpointPath: "a/{var1}/b/{var2}",
                        method: "GET",
                        pathArguments: ["val1", "val2"],
                        queryArguments: { key1: "val1", key2: "val2" },
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a/val1/b/val2?key1=val1&key2=val2";
                    expectedFetchRequest = createFetchRequest({
                        method: "GET",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(mockedResponseData, 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toEqual(mockedResponseData)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("encodes path and query params", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        endpointName: "a",
                        endpointPath: "a/{var1}/b/{var2}",
                        method: "GET",
                        pathArguments: ["val1/foo", "val2/foo"],
                        queryArguments: { key1: "val1/foo", key2: "val2/foo" },
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a/val1%2Ffoo/b/val2%2Ffoo?key1=val1%2Ffoo&key2=val2%2Ffoo";
                    expectedFetchRequest = createFetchRequest({
                        method: "GET",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(mockedResponseData, 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toEqual(mockedResponseData)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("passes dynamic tokens", function () { return __awaiter(_this, void 0, void 0, function () {
        var tokenProvider, request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tokenProvider = jest.fn().mockReturnValueOnce(token);
                    bridge = new fetchBridge_1.FetchBridge({ baseUrl: baseUrl, token: tokenProvider, fetch: undefined, userAgent: userAgent });
                    request = {
                        endpointName: "a",
                        endpointPath: "a/",
                        method: "GET",
                        pathArguments: [],
                        queryArguments: {},
                    };
                    expectedUrl = baseUrl + "/a/";
                    expectedFetchRequest = createFetchRequest({
                        method: "GET",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(undefined, 204);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toBeUndefined()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("passes headers", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        endpointName: "a",
                        endpointPath: "a",
                        headers: {
                            "Cache-Control": "max-age=60",
                            "boolean-header": true,
                            "null-header": null,
                            "number-header": 1,
                        },
                        method: "GET",
                        pathArguments: [],
                        queryArguments: {},
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a";
                    expectedFetchRequest = createFetchRequest({
                        contentType: "application/json",
                        headers: {
                            "Cache-Control": "max-age=60",
                            "boolean-header": "true",
                            "number-header": "1",
                        },
                        method: "GET",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(mockedResponseData, 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    return [4 /*yield*/, expect(bridge.callEndpoint(request)).resolves.toEqual(mockedResponseData)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("throws error if request media type is unrecognized", function () { return __awaiter(_this, void 0, void 0, function () {
        var unrecognizedType, request, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    unrecognizedType = "my-unrecognized-type";
                    request = {
                        data: mockedRequestData,
                        endpointName: "a",
                        endpointPath: "a/{var}/b",
                        method: "POST",
                        pathArguments: [],
                        queryArguments: {},
                        requestMediaType: unrecognizedType,
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, bridge.callEndpoint(request)];
                case 2:
                    _a.sent();
                    fail("Did not throw an error");
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    expect(error_1.message).toBe("Unrecognized request media type " + unrecognizedType);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    it("throws error if parsing the body fails", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse, error_2, typedError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        endpointName: "a",
                        endpointPath: "a",
                        method: "GET",
                        pathArguments: [],
                        queryArguments: {},
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a";
                    expectedFetchRequest = createFetchRequest({
                        method: "GET",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse("{thisIsNotJson!", 200);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    expect.assertions(4);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, bridge.callEndpoint(request)];
                case 2:
                    _a.sent();
                    fail("Did not throw an error");
                    return [3 /*break*/, 4];
                case 3:
                    error_2 = _a.sent();
                    expect(error_2).toBeInstanceOf(errors_1.ConjureError);
                    typedError = error_2;
                    expect(typedError.type).toBe(errors_1.ConjureErrorType.Parse);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    it("throws error if status code is not ok", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse, error_3, typedError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        endpointName: "a",
                        endpointPath: "a",
                        method: "GET",
                        pathArguments: [],
                        queryArguments: {},
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a";
                    expectedFetchRequest = createFetchRequest({
                        method: "GET",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = createFetchResponse(mockedResponseData, 404);
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    expect.assertions(6);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, bridge.callEndpoint(request)];
                case 2:
                    _a.sent();
                    fail("Did not throw an error");
                    return [3 /*break*/, 4];
                case 3:
                    error_3 = _a.sent();
                    expect(error_3).toBeInstanceOf(errors_1.ConjureError);
                    typedError = error_3;
                    expect(typedError.type).toBe(errors_1.ConjureErrorType.Status);
                    expect(typedError.status).toBe(404);
                    expect(typedError.body).toEqual(mockedResponseData);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    it("throws error if a network error occurs", function () { return __awaiter(_this, void 0, void 0, function () {
        var request, expectedUrl, expectedFetchRequest, expectedFetchResponse, error_4, typedError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = {
                        endpointName: "a",
                        endpointPath: "a",
                        method: "GET",
                        pathArguments: [],
                        queryArguments: {},
                        responseMediaType: httpApiBridge_1.MediaType.APPLICATION_JSON,
                    };
                    expectedUrl = baseUrl + "/a";
                    expectedFetchRequest = createFetchRequest({
                        method: "GET",
                        responseMediaType: request.responseMediaType,
                    });
                    expectedFetchResponse = __assign({}, createFetchResponse(mockedResponseData, 404), { throws: new TypeError("a network error occured") });
                    mockFetch(expectedUrl, expectedFetchRequest, expectedFetchResponse);
                    expect.assertions(5);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, bridge.callEndpoint(request)];
                case 2:
                    _a.sent();
                    fail("Did not throw an error");
                    return [3 /*break*/, 4];
                case 3:
                    error_4 = _a.sent();
                    expect(error_4).toBeInstanceOf(errors_1.ConjureError);
                    typedError = error_4;
                    expect(typedError.type).toBe(errors_1.ConjureErrorType.Network);
                    expect(typedError.originalError).toBeInstanceOf(TypeError);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
});
function createFetchRequest(opts) {
    var method = opts.method, data = opts.data, responseMediaType = opts.responseMediaType;
    var contentType = opts.contentType || httpApiBridge_1.MediaType.APPLICATION_JSON;
    var headers = opts.headers || {};
    var request = {
        credentials: "same-origin",
        headers: __assign({}, headers, { Authorization: "Bearer " + token, "Fetch-User-Agent": "foo/1.2.3" }),
        method: method,
    };
    if (data != null) {
        request.body = contentType === httpApiBridge_1.MediaType.APPLICATION_JSON ? JSON.stringify(data) : data;
        // when we do a fetch with form data, leave the Content-Type undefined so browser can set form boundary
        if (contentType !== "multipart/form-data") {
            request.headers["Content-Type"] = contentType;
        }
    }
    if (responseMediaType) {
        request.headers[ACCEPT_HEADER] = responseMediaType;
    }
    return request;
}
function createFetchResponse(data, status) {
    return {
        body: data,
        headers: {
            "Content-Type": httpApiBridge_1.MediaType.APPLICATION_JSON,
        },
        ok: status >= 200 && status < 300,
        sendAsJson: true,
        status: status,
    };
}
//# sourceMappingURL=fetchBridgeTests.js.map