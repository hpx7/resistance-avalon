"use strict";
/**
 * @license
 * Copyright 2018 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var http = require("http");
var nodeFetch = require("node-fetch-polyfill");
var fetchBridge_1 = require("../fetchBridge");
var conjureService_1 = require("./conjureService");
var token = "TOKEN";
describe("FetchBridgeImplServer", function () {
    var bridge;
    var app;
    var server;
    beforeEach(function (done) {
        var host = "localhost";
        var port = 9000;
        var baseUrl = "http://" + host + ":" + port;
        var userAgent = { productName: "foo", productVersion: "1.2.3" };
        bridge = new fetchBridge_1.FetchBridge({ baseUrl: baseUrl, token: token, fetch: nodeFetch, userAgent: userAgent });
        app = express();
        server = http.createServer(app);
        server.listen(port, host, done);
    });
    afterEach(function (done) {
        server.close(done);
    });
    it("should reject strange raw strings returned by Jetty (for consistency with http-remoting)", function (done) {
        app.all("/*", function (_req, res) {
            res.status(200)
                .set("Content-Type", "application/json")
                .send("Hello, world!");
        });
        new conjureService_1.ConjureService(bridge)
            .string()
            .then(fail)
            .catch(function (s) {
            expect(s.originalError.toString()).toContain("Unexpected token H in JSON at position 0");
            done();
        });
    });
    it("should receive strings with quotes", function (done) {
        app.all("/*", function (_req, res) {
            res.status(200)
                .set("Content-Type", "application/json")
                .send('"Hello, world!"');
        });
        new conjureService_1.ConjureService(bridge)
            .string()
            .then(function (s) {
            expect(s).toEqual("Hello, world!");
            done();
        })
            .catch(fail);
    });
    it("should receive JSON stringified payloads", function (done) {
        var payload = { dataset: "foo", count: 1 };
        app.all("/*", function (_req, res) {
            res.status(200)
                .set("Content-Type", "application/json")
                .send(JSON.stringify(payload));
        });
        new conjureService_1.ConjureService(bridge)
            .body(payload)
            .then(function (s) {
            expect(s).toEqual(payload);
            done();
        })
            .catch(fail);
    });
});
//# sourceMappingURL=fetchBridgeServerTests.js.map